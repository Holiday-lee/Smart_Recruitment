syntax = "proto3";

option java_multiple_files = true;
option java_package = "generated.grpc.candidateengagementservice";
option java_outer_classname = "CandidateEngagementServiceImpl";

package CandidateEngagementService;

// CandidateEngagementService manages the communication of interview slots to candidates and processes their responses
// Note: The client side in all methods refers to the recruitment system
service CandidateEngagementService {

  // CLIENT-STREAMING METHOD
  // INPUT: A stream of interview slots for a candidate sent by the recruitment system
  // OUTPUT: Confirmation that slots were successfully sent to the candidate
  rpc SendInterviewSlots(stream SlotSelection) returns (SlotDeliveryConfirmation) {}
  
  // UNARY METHOD
  // INPUT: A candidate's slot choice (received by the recruitment system)
  // OUTPUT: Confirmation that the selection has been processed
  rpc ReceiveCandidateSlotChoice(CandidateSlotChoice) returns (SchedulingConfirmation) {}
}

// Message defining interview slots to send to a candidate
message SlotSelection {
  string candidate_name = 1;
  string slot_time = 2;
  string slot_location = 3;
}

// Message for a candidate's chosen slot (received by the recruiter side)
message CandidateSlotChoice {
  string candidate_name = 1;
  string chosen_time = 2;
  string chosen_location = 3;
}

// Confirmation that slots were successfully sent to the candidate
message SlotDeliveryConfirmation {
  bool slots_delivered = 1;
  string delivery_time = 2;
}

// Confirmation of candidate's selected slot processing
message SchedulingConfirmation {
  bool confirmed = 1;
  string confirmation_time = 2;
}